data <- data %>% mutate(name=cut(count_col,
breaks=c(-1,xs,Inf), labels=c("none",paste0(xs, ""))))
count(data, cluster_col, name) %>% ggplot( aes(fill=name, y=n, x=cluster)) +
geom_bar(position="stack", stat="identity")+theme_minimal()
count_col <- tweets$retweetCount
cluster <- tweets$cluster
data <- data.frame(count_col, cluster_col)
xs <- quantile(count_col,c(1/4,1/2,3/4,1))
data <- data %>% mutate(name=cut(count_col,
breaks=c(-1,xs,Inf), labels=c("none",paste0(xs, ""))))
count(data, cluster, name) %>% ggplot( aes(fill=name, y=n, x=cluster)) +
geom_bar(position="stack", stat="identity")+theme_minimal()
cluster <- tweets$cluster
count(data, cluster, name) %>% ggplot( aes(fill=name, y=n, x=cluster)) +
geom_bar(position="stack", stat="identity")+theme_minimal()
data <- data.frame(count_col, cluster_col)
data <- data.frame(count_col, cluster)
data <- data %>% mutate(name=cut(count_col,
breaks=c(-1,xs,Inf), labels=c("none",paste0(xs, ""))))
count(data, cluster, name) %>% ggplot( aes(fill=name, y=n, x=cluster)) +
geom_bar(position="stack", stat="identity")+theme_minimal()
function(count_col, cluster, name) {
data <- data.frame(count_col, cluster)
xs <- quantile(count_col,c(1/4,1/2,3/4,1))
data <- data %>% mutate(Variable=cut(count_col,
breaks=c(-1,xs,Inf), labels=c("none",paste0(xs, ""))))
count(data, cluster, name) %>% ggplot( aes(fill=Variable, y=n, x=cluster)) +
geom_bar(position="stack", stat="identity")+theme_minimal()
}
function(col1, col2, name) {
count_col <- col1
cluster <- col2
data <- data.frame(count_col, cluster)
xs <- quantile(count_col,c(1/4,1/2,3/4,1))
data <- data %>% mutate(Variable=cut(count_col,
breaks=c(-1,xs,Inf), labels=c("none",paste0(xs, ""))))
count(data, cluster, name) %>% ggplot( aes(fill=Variable, y=n, x=cluster)) +
geom_bar(position="stack", stat="identity")+theme_minimal()
}
quantile_plot <- function(col1, col2) {
count_col <- col1
cluster <- col2
data <- data.frame(count_col, cluster)
xs <- quantile(count_col,c(1/4,1/2,3/4,1))
data <- data %>% mutate(Variable=cut(count_col,
breaks=c(-1,xs,Inf), labels=c("none",paste0(xs, ""))))
count(data, cluster, name) %>% ggplot( aes(fill=Variable, y=n, x=cluster)) +
geom_bar(position="stack", stat="identity")+theme_minimal()
}
quantil_plot(tweets$followers, tweets$cluster)
count_col <- tweets$retweetCount
cluster <- tweets$cluster
data <- data.frame(count_col, cluster)
xs <- quantile(count_col,c(1/4,1/2,3/4,1))
data <- data %>% mutate(name=cut(count_col,
breaks=c(-1,xs,Inf), labels=c("none",paste0(xs, ""))))
count(data, cluster, name) %>% ggplot( aes(fill=name, y=n, x=cluster)) +
geom_bar(position="stack", stat="identity")+theme_minimal()
count_col <- tweets$retweetCount
cluster <- tweets$cluster
data <- data.frame(count_col, cluster)
xs <- quantile(count_col,c(1/4,1/2,3/4,1))
data <- data %>% mutate(name=cut(count_col,
breaks=c(-1,xs,Inf), labels=c("none",paste0(xs, ""))))
count(data, cluster, name) %>% ggplot( aes(fill=name, y=n, x=cluster)) +
geom_bar(position="stack", stat="identity")+theme_minimal()
quantile_plot <- function(col1, col2) {
count_col <- col1
cluster <- col2
data <- data.frame(count_col, cluster)
xs <- quantile(count_col,c(1/4,1/2,3/4,1))
data <- data %>% mutate(name=cut(count_col,
breaks=c(-1,xs,Inf), labels=c("none",paste0(xs, ""))))
count(data, cluster, name) %>% ggplot( aes(fill=name, y=n, x=cluster)) +
geom_bar(position="stack", stat="identity")+theme_minimal()
}
quantil_plot(tweets$followers, tweets$cluster)
quantile_plot <- function(col1, col2) {
count_col <- col1
cluster <- col2
data <- data.frame(count_col, cluster)
xs <- quantile(count_col,c(1/4,1/2,3/4,1))
data <- data %>% mutate(name=cut(count_col,
breaks=c(-1,xs,Inf), labels=c("none",paste0(xs, ""))))
count(data, cluster, name) %>% ggplot( aes(fill=name, y=n, x=cluster)) +
geom_bar(position="stack", stat="identity")+theme_minimal()
}
quantil_plot(tweets$followers, tweets$cluster)
# compare retweet count in each cluster
xs <- quantile(tweets$retweetCount,c(1/4,1/2,3/4,1))
tweets <- tweets %>%
mutate(retweetCount_cat=cut(retweetCount,
breaks=c(-1,xs,Inf), labels=c("none",paste0(xs, ""))))
count(tweets, cluster, retweetCount_cat) %>% ggplot( aes(fill=retweetCount_cat, y=n, x=cluster)) +
geom_bar(position="stack", stat="identity")+theme_minimal()
quantil_plot(tweets$followers, tweets$cluster)
quantile_plot(tweets$followers, tweets$cluster)
count(tweets, cluster, retweetCount_cat) %>% ggplot( aes(fill=retweetCount_cat, y=n, x=cluster)) +
geom_bar(position="stack", stat="identity")+theme_minimal()
quantile_plot(tweets$followers, tweets$cluster)
quantile_plot(tweets$followers, tweets$cluster) + title("hi")
class(quantile_plot(tweets$followers, tweets$cluster))
quantile_plot(tweets$followers, tweets$cluster)
quantile_plot(tweets$followers, tweets$cluster) + ggtitle("HI")
# add cluster group number variable
tweets$cluster <- k3$cluster
# plot of 10 most common words
ggplot(common_words, aes(x = reorder(word, n, function(n) -n), y=n)) +
geom_bar(stat="identity", fill="lightblue")+ theme(axis.text.x = element_text(angle = 60, hjust = 1)) + xlab("")
# compare scores in each cluster
count(tweets, cluster, score) %>% ggplot( aes(fill=score, y=n, x=cluster)) +
geom_bar(position="stack", stat="identity")+theme_minimal()
# compare retweet count in each cluster
quantile_plot(tweets$retweetCount, tweets$cluster)+ ggtitle
quantile_plot(tweets$followers, tweets$cluster)
quantile_plot(tweets$followers, tweets$cluster) + ggtitle("Followers Count")
# compare retweet count in each cluster
quantile_plot(tweets$retweetCount, tweets$cluster) + ggtitle("Retweet Count")
grid.arrange(p5, p6, nrow = 2)
# compare retweet count in each cluster
p5 <- quantile_plot(tweets$retweetCount, tweets$cluster) + ggtitle("Retweet Count")
p6 <- quantile_plot(tweets$followers, tweets$cluster) + ggtitle("Followers Count")
grid.arrange(p5, p6, nrow = 2)
grid.arrange(p5, p6, ncol = 2)
quantile(tweets$retweetCount)
floor(quantile(tweets$retweetCount))
# compare retweet count in each cluster
p5 <- quantile_plot(tweets$retweetCount, tweets$cluster) + ggtitle("Retweet Count")
p6 <- quantile_plot(tweets$followers, tweets$cluster) + ggtitle("Followers Count")
grid.arrange(p5, p6, ncol = 2)
# compare retweet count in each cluster
p5 <- quantile_plot(tweets$retweetCount, tweets$cluster) + ggtitle("Retweet Count")
p6 <- quantile_plot(tweets$followers, tweets$cluster) + ggtitle("Followers Count")
grid.arrange(p5, p6, ncol = 2)
ceil(quantile(tweets$retweetCount))
ceiling(quantile(tweets$retweetCount))
source("data-transform.R")
# compare retweet count in each cluster
p5 <- quantile_plot(tweets$retweetCount, tweets$cluster) + ggtitle("Retweet Count")
p6 <- quantile_plot(tweets$followers, tweets$cluster) + ggtitle("Followers Count")
grid.arrange(p5, p6, ncol = 2)
grid.arrange(p1, p2, p3, p4, nrow = 2)
p3
p2
# plot of 10 most common words
ggplot(common_words, aes(x = reorder(word, n, function(n) -n), y=n)) +
geom_bar(stat="identity", fill="lightblue")+ theme(axis.text.x = element_text(angle = 60, hjust = 1)) + xlab("")
# plot of 10 most common words
p5 <- ggplot(common_words, aes(x = reorder(word, n, function(n) -n), y=n)) +
geom_bar(stat="identity", fill="lightblue")+ theme(axis.text.x = element_text(angle = 60, hjust = 1)) + xlab("")
p5
# plot of 10 most common words
p5 <- ggplot(common_words, aes(x = reorder(word, n, function(n) -n), y=n)) +
geom_bar(stat="identity", fill="lightblue")+ theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
xlab("") + ggtitle("Top 10 Most Common Words")
p5
# compare scores in each cluster
p6 <- count(tweets, cluster, score) %>% ggplot( aes(fill=score, y=n, x=cluster)) +
geom_bar(position="stack", stat="identity")+theme_minimal()
p6
# compare scores in each cluster
p6 <- count(tweets, cluster, score) %>% ggplot( aes(fill=score, y=n, x=cluster)) +
geom_bar(position="stack", stat="identity")+theme_minimal() +
ggtitle("Score Distribution Grouped by Clusters")
p6
# compare retweet count in each cluster
p5 <- quantile_plot(tweets$retweetCount, tweets$cluster) + ggtitle("Retweet Count")
p6 <- quantile_plot(tweets$followers, tweets$cluster) + ggtitle("Followers Count")
grid.arrange(p5, p6, ncol = 2)
# compare retweet count in each cluster
p7 <- quantile_plot(tweets$retweetCount, tweets$cluster) + ggtitle("Retweet Count")
p8 <- quantile_plot(tweets$followers, tweets$cluster) + ggtitle("Followers Count")
grid.arrange(p5, p6, ncol = 2)
1:8
paste0("p",1:8)
grid.arrange(p1,p2,p3,p4,p5, p6,p7,p8, ncol = 4)
grid.arrange(p5, p6, ncol = 2)
top_5_tweets(tweets,k3)
# compare
top_n_tweets(tweets,k3,3)
source("data-transform.R")
# compare
top_n_tweets(tweets,k3,3)
source("data-transform.R")
# compare
top_n_tweets(tweets,k3,3)
# compare
top_n_tweets(tweets,k3,3)
# compare
top_3 <- top_n_tweets(tweets,k3,3)
count(top_3,followers,cluter)
count(top_3,followers,cluster)
# compare
top_3 <- top_n_tweets(tweets,k3,3)
top_3$followers
count(top_3,followers,cluster)
count(top_3,cluster,followers)
# compare retweet count in each cluster
p7 <- quantile_plot(tweets$retweetCount, tweets$cluster) + ggtitle("Retweet Count")
# compare follower count in each cluster
p8 <- quantile_plot(tweets$followers, tweets$cluster) + ggtitle("Followers Count")
grid.arrange(p5, p6, ncol = 2)
count(top_3,cluster,screenName)
top_3 %>% group_by(cluster) %>% select(screenName)
# compare total tweets count in each cluster
p8 <- quantile_plot(tweets$total_tweets, tweets$cluster) + ggtitle("Total Tweets Count")
# compare retweet count in each cluster
p7 <- quantile_plot(tweets$retweetCount, tweets$cluster) + ggtitle("Retweet Count")
# compare follower count in each cluster
p8 <- quantile_plot(tweets$followers, tweets$cluster) + ggtitle("Followers Count")
# compare total tweets count in each cluster
p9 <- quantile_plot(tweets$total_tweets, tweets$cluster) + ggtitle("Total Tweets Count")
grid.arrange(p7, p8, p9, nrow = 2)
# compare
top_3 <- top_n_tweets(tweets,k3,3)
top_3 %>% group_by(cluster) %>% select(screenName, followers, total_tweets)
# Choose topic word and create data frame used for algorithm
word <- "biden"
n <- 50
df_raw <- scrape_tweets(word, n)
processed_data <- process_tweets(word,df_raw,n)
source("tweet-scraping.R")
source("data-transform.R")
# Choose topic word and create data frame used for algorithm
word <- "biden"
n <- 100
df_raw <- scrape_tweets(word, n)
processed_data <- process_tweets(word,df_raw,n)
topic <- word
tweets <- df_raw
number_of_tweets <- n
topic <- word
tweets <- df_raw
number_of_tweets <- n
exclude <- data.frame(word = c(topic,
paste0(topic, c("'s" , "'s", "s")),
"https",
"t.co",
"rt",
"amp",
"it's",
paste0(1:100)))
# Create list of unwanted words
my_stop_words <- stop_words %>% select(-lexicon) %>%
bind_rows(exclude)
followers <- c()
total_tweets <- c()
followers <- c()
total_tweets <- c()
location <- c()
for (i in 1:number_of_tweets) {
user <- getUser(tweets$screenName[i])
followers <- append(followers, user$followersCount)
location <- append(location, user$location)
total_tweets <- append(total_tweets, user$statusesCount)
}
tweets$followers <- followers
tweets$total_tweets <- total_tweets
tweets$location <- location
# Separate each tweet by word
tweet_words <- tweets %>% select(id,text) %>% unnest_tokens(word,text)
# Filter out stop words
tweet_words_clean <- tweet_words %>% anti_join(my_stop_words)
common_words <- tweet_words_clean %>% count(word, sort=TRUE) %>% head(10)
# adding score column if tweet contains common words
score <- rep(0, number_of_tweets)
for (i in 1:nrow(common_words)) {
ids <- tweet_words_clean %>% filter(word==common_words[i,1]) %>% select(id) %>% unique()
for (j in 1:length(ids[,1])) {
n <- which(tweets$id == ids[j,1])
score[n] <- sum(score[n], 1)
}
}
# select only the numerical variable
tweets$score <- score
tweets_num <- select(tweets, total_tweets, followers, retweetCount, score)
# transform different categorical values into numerics
tweets_num$isRetweet <- as.numeric(tweets$isRetweet)
tweets_num$created <- as.numeric(tweets$created)
a <- list(tweets, scale(tweets_num), common_words)
processed_data <- a
write.csv(tweets, "tweets.csv")
write.csv(scale(tweets_num), "scaled_tweets.csv")
write.csv(common_words, "common_word.csv")
processed_data <- process_tweets(word,df_raw,n)
tweets <- as.data.frame(processed_data[1])
df <- as.data.frame(processed_data[2])
common_words <- as.data.frame(processed_data[3])
tweets <- as.data.frame(processed_data[1])
df <- as.data.frame(processed_data[2])
common_words <- as.data.frame(processed_data[3])
k2 <- kmeans(df,2,nstart=25)
k3 <- kmeans(df,3,nstart=25)
k4 <- kmeans(df,4,nstart=25)
k5 <- kmeans(df,5,nstart=25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = df) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = df) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = df) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = df) + ggtitle("k = 5")
grid.arrange(p1, p2, p3, p4, nrow = 2)
write.csv(tweets, "tweets.csv")
write.csv(scale(tweets_num), "scaled_tweets.csv")
write.csv(common_words, "common_word.csv")
# obtaining top 5 tweets nearest to each centroid
k_tweets <- top_5_tweets(tweets, k3)
# add cluster group number variable
tweets$cluster <- k3$cluster
p2
# plot of 10 most common words
p5 <- ggplot(common_words, aes(x = reorder(word, n, function(n) -n), y=n)) +
geom_bar(stat="identity", fill="lightblue")+ theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
xlab("") + ggtitle("Top 10 Most Common Words")
p5
# compare scores in each cluster
p6 <- count(tweets, cluster, score) %>% ggplot( aes(fill=score, y=n, x=cluster)) +
geom_bar(position="stack", stat="identity")+theme_minimal() +
ggtitle("Score Distribution Grouped by Clusters")
p6
# compare retweet count in each cluster
p7 <- quantile_plot(tweets$retweetCount, tweets$cluster) + ggtitle("Retweet Count")
# compare follower count in each cluster
p8 <- quantile_plot(tweets$followers, tweets$cluster) + ggtitle("Followers Count")
# compare total tweets count in each cluster
p9 <- quantile_plot(tweets$total_tweets, tweets$cluster) + ggtitle("Total Tweets Count")
grid.arrange(p7, p8, p9, nrow = 2)
top_3$location
location
a <- list(tweets, scale(tweets_num), common_words)
processed_data <- a
tweets <- as.data.frame(processed_data[1])
df <- as.data.frame(processed_data[2])
common_words <- as.data.frame(processed_data[3])
common_words
# testing out different number of clusters
k2 <- kmeans(df,2,nstart=25)
k3 <- kmeans(df,3,nstart=25)
k4 <- kmeans(df,4,nstart=25)
k5 <- kmeans(df,5,nstart=25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = df) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = df) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = df) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = df) + ggtitle("k = 5")
grid.arrange(p1, p2, p3, p4, nrow = 2)
# add cluster group number variable
tweets$cluster <- k3$cluster
p2
# plot of 10 most common words
p5 <- ggplot(common_words, aes(x = reorder(word, n, function(n) -n), y=n)) +
geom_bar(stat="identity", fill="lightblue")+ theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
xlab("") + ggtitle("Top 10 Most Common Words")
p5
# compare scores in each cluster
p6 <- count(tweets, cluster, score) %>% ggplot( aes(fill=score, y=n, x=cluster)) +
geom_bar(position="stack", stat="identity")+theme_minimal() +
ggtitle("Score Distribution Grouped by Clusters")
p6
# compare retweet count in each cluster
p7 <- quantile_plot(tweets$retweetCount, tweets$cluster) + ggtitle("Retweet Count")
# compare follower count in each cluster
p8 <- quantile_plot(tweets$followers, tweets$cluster) + ggtitle("Followers Count")
# compare total tweets count in each cluster
p9 <- quantile_plot(tweets$total_tweets, tweets$cluster) + ggtitle("Total Tweets Count")
grid.arrange(p7, p8, p9, nrow = 2)
# compare
top_3 <- top_n_tweets(tweets,k3,3)
top_3 %>% group_by(cluster) %>% select(screenName, followers, total_tweets, location)
# compare follower count in each cluster
p7
p8
p8
p8
p9
# compare follower count in each cluster
p7
p8
grid.arrange(p7, p8, p9, nrow = 2)
grid.arrange(p7, p8, p9,p6, nrow = 2)
# compare
top_3 <- top_n_tweets(tweets,k3,3)
top_3 %>% group_by(cluster) %>% select(screenName, followers, total_tweets, location)
# compare
top_3 <- top_n_tweets(tweets,k3,5)
top_3 %>% group_by(cluster) %>% select(screenName, followers, total_tweets, location)
top_3 %>% group_by(cluster) %>% select(score,screenName, followers, total_tweets, location)
top_3 %>% group_by(cluster) %>% select(screenName, followers, total_tweets, location, score)
names(tweets)
table(tweets$favoriteCount)
p2
p2.1 <- p2
tweets_num$location <- as.numeric(as.factor(tweets$location))
tweets_num
tweets_num$location
table(tweets_num$location)
count(tweets_num$location,sort=T)
count(tweets_num, location,sort=T)
head(count(tweets_num, location,sort=T))
head(count(tweets, location,sort=T))
tweets_num$location <- as.numeric(as.factor(tweets$location))
a <- list(tweets, scale(tweets_num), common_words)
processed_data <- a
tweets <- as.data.frame(processed_data[1])
df <- as.data.frame(processed_data[2])
k3 <- kmeans(df,3,nstart=25)
p2 <- fviz_cluster(k3, geom = "point",  data = df) + ggtitle("k = 3")
p2.2 <- p2
grid.arrange(p2.1, p2.2,ncol = 2)
# compare
top_5 <- top_n_tweets(tweets,k3,5)
top_5_tweets() %>% group_by(cluster) %>% select(screenName, followers, total_tweets, location, score)
# compare
top_5 <- top_n_tweets(tweets,k3,5)
top_5_tweets() %>% group_by(cluster) %>% select(screenName, followers, total_tweets, location, score)
n <- 400
# Choose topic word and create data frame used for algorithm
word <- "trump"
# Choose topic word and create data frame used for algorithm
word <- "covid"
n <- 400
df_raw <- scrape_tweets(word, n)
processed_data <- process_tweets(word,df_raw,n)
k3$withinss
k3$tot.withinss
k3$betweenss
k3$size
k3$size
k3
processed_data <- a
source("tweet-scraping.R")
source("data-transform.R")
data <- scrape_tweets(word, n, live=FALSE)
tweets <- as.data.frame(data[1])
View(tweets)
tweets <- as.data.frame(data[1])
data <- scrape_tweets(word, n, live=FALSE)
tweets <- as.data.frame(data[1])
View(tweets)
data <- scrape_tweets(word, n, live=FALSE)
tweets <- as.data.frame(data[1])
data
data[1]
tweets <- as.data.frame(data[1])
View(tweets)
read.csv("tweets.csv")
tweets <- read.csv("tweets.csv")
df <- read.csv("scaled_tweets.csv")
common_words <- read.csv("common_words.csv")
View(df)
try <- function(x) {
tweets <- read.csv("tweets.csv")
df <- read.csv("scaled_tweets.csv")
common_words <- read.csv("common_words.csv")
return(c(tweets, df, common_words))
}
a <- try()
a[1]
a[2]
class(a)
a[1]
a[2]
a[3]
length(a)
try <- function(x) {
tweets <- read.csv("tweets.csv")
df <- read.csv("scaled_tweets.csv")
common_words <- read.csv("common_words.csv")
View(df)
print(length(tweets))
return(c(tweets, df, common_words))
}
a <- try()
try <- function(x) {
tweets <- read.csv("tweets.csv")
df <- read.csv("scaled_tweets.csv")
common_words <- read.csv("common_words.csv")
View(df)
print(length(tweets))
View(common_words)
return(c(tweets, df, common_words))
}
a <- try()
try <- function(x) {
tweets <- read.csv("tweets.csv")
df <- read.csv("scaled_tweets.csv")
common_words <- read.csv("common_words.csv")
return(c(tweets, df, common_words))
}
a <- try()
length(a)
try <- function(x) {
tweets <- read.csv("tweets.csv")
df <- read.csv("scaled_tweets.csv")
common_words <- read.csv("common_words.csv")
return(list(tweets, df, common_words))
}
a <- try()
a[1]
data <- scrape_tweets(word, n, live=FALSE)
tweets <- as.data.frame(data[1])
df <- as.data.frame(data[2])
common_words <- as.data.frame(data[3])
View(df)
eet-scraping.R")
source("da
source("tweet-scraping.R")
source("data-transform.R")
data <- scrape_tweets(word, n, live=FALSE)
tweets <- as.data.frame(data[1])
df <- as.data.frame(data[2])
common_words <- as.data.frame(data[3])
View(df)
